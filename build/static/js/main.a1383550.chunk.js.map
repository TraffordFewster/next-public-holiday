{"version":3,"sources":["features/TodayHoliday/HolidayReducer.js","app/store.js","features/TodayHoliday/TodayHolidayActions.js","features/TodayHoliday/TodayHoliday.js","features/UpcomingHolidays/UpcomingHolidays.js","App.js","serviceWorker.js","index.js"],"names":["HolidayReducer","action","type","payload","today","next","holidayArray","store","configureStore","reducer","holiday","setHolidays","data","midnight","Date","setHours","id","forEach","element","elementDateTime","date","getTime","push","now","dateDiff","diff","Math","round","TodayHoliday","isToday","useSelector","state","nextHoliday","useEffect","a","axios","get","response","dispatch","actions","getIsHoliday","className","UpcomingHolidays","holidays","list","map","index","title","notes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAQeA,EARQ,WAA+C,IAAZC,EAAW,uCACjE,MACS,iBADFA,EAAOC,KAECD,EAAOE,QAEP,CAACC,MAAM,EAAEC,KAAK,IAAKC,aAAa,KCFtCC,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASV,KCLN,SAASW,EAAYC,GACxB,IAAIN,EAAe,GACfO,EAAW,IAAIC,KACnBD,EAASE,SAAS,EAAE,EAAE,EAAE,GACxB,IAAIX,EAAQ,EACRC,EAAO,aACPW,EAAK,EAETJ,EAAKK,SAAQ,SAAAC,GACT,IAAIC,EAAkB,IAAIL,KAAKI,EAAQE,MAAMC,UACzCF,GAAmBN,EAASQ,YAC5BH,EAAQF,GAAKA,IACbV,EAAagB,KAAKJ,GACdC,EAAkBd,IAClBA,EAAOc,IAGXA,IAAoBN,EAASQ,YAE7BjB,EAAQ,MAIhB,IACImB,EAAM,IAAIT,KAEVU,EADW,IAAIV,KAAKT,GACEkB,EAItBE,EAAOC,KAAKC,MAAMH,EAPN,OAUhB,MAAO,CACHtB,KAAM,eACNC,QAAS,CAACC,QAAMC,KAJpBA,EAAOoB,EAImBnB,iB,4BCDfsB,EA5BM,WACjB,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMrB,QAAQN,SAC7C4B,EAAcF,aAAY,SAAAC,GAAK,OAAIA,EAAMrB,QAAQL,QAEvD4B,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEACyBC,IAAMC,IAAN,yCADzB,OACQC,EADR,OAEI9B,EAAM+B,SAASC,EAAoBF,EAASzB,KAAK,qBAAd,SAFvC,4CADY,uBAAC,WAAD,wBAMZ4B,KACD,IAQH,OACI,sBAAKC,UAAU,0CAAf,UACI,0DAPY,IAAZZ,EAAuB,oEACX,IAAZA,EAAuB,8DACX,IAAZA,EAAuB,oEAA3B,EAOI,kDAAqBG,EAArB,gBCHGU,EAvBU,WACrB,IAAMC,EAAWb,aAAY,SAAAC,GAAK,OAAIA,EAAMrB,QAAQJ,gBAEhDiB,EAAM,IAAIT,KACR8B,EAAOD,EAASE,KAAI,SAACnC,EAAQoC,GAAT,OACrB,qBAAiBL,UAAU,oEAA3B,SACG,qBAAKA,UAAU,aAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,kBAAd,SAAiC/B,EAAQqC,QACzC,mBAAGN,UAAU,gBAAb,SAA6B,gCAAQ/B,EAAQsC,UAC7C,oBAAGP,UAAU,YAAb,UAA0Bf,KAAKC,OAAO,IAAIb,KAAKJ,EAAQU,MAAQG,GAR/D,OAQA,uBALDuB,MAWf,OACI,qBAAKL,UAAU,WAAf,SACKG,K,MCHEK,MAbf,WACE,OACE,sBAAKR,UAAU,gBAAf,UACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,QAGF,cAAC,EAAD,QCDYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUlD,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJmD,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.a1383550.chunk.js","sourcesContent":["const HolidayReducer = (state={today:0, holidayArray:[]}, action) => {\n    switch(action.type){\n        case 'SET_HOLIDAYS':\n            return action.payload;\n        default:\n            return {today:0,next:\"?\", holidayArray:[]};\n    }\n}\nexport default HolidayReducer","import { configureStore } from '@reduxjs/toolkit';\nimport HolidayReducer from '../features/TodayHoliday/HolidayReducer';\n\nexport const store = configureStore({\n  reducer: {\n    holiday: HolidayReducer,\n  },\n});\n","export function setHolidays(data) {\n    let holidayArray = []\n    var midnight = new Date();\n    midnight.setHours(0,0,0,0);\n    let today = 1;\n    let next = 2147483647000;\n    let id = 1;\n\n    data.forEach(element => {\n        let elementDateTime = new Date(element.date).getTime()\n        if (elementDateTime >= midnight.getTime()) {\n            element.id = id++;\n            holidayArray.push(element);\n            if (elementDateTime < next) {\n                next = elementDateTime;\n            }\n        }\n        if (elementDateTime === midnight.getTime())\n        {\n            today = 2;\n        }\n    });\n\n    const ONE_DAY = 1000 * 60 * 60 * 24;\n    let now = new Date()\n    let nextDate = new Date(next)\n    let dateDiff = nextDate - now\n\n    // console.log(now,\"           \",nextDate,\"              \",dateDiff)\n\n    let diff = Math.round(dateDiff / ONE_DAY)\n    next = diff\n\n    return {\n        type: 'SET_HOLIDAYS',\n        payload: {today,next, holidayArray}\n    }\n}","import React, {useEffect} from 'react'\nimport { useSelector } from 'react-redux'\nimport { store } from '../../app/store'\nimport * as actions from './TodayHolidayActions'\nimport axios from 'axios'\n\nconst TodayHoliday = () => {\n    const isToday = useSelector(state => state.holiday.today)\n    const nextHoliday = useSelector(state => state.holiday.next)\n\n    useEffect(() => {\n        async function getIsHoliday() {\n            let response = await axios.get(`https://www.gov.uk/bank-holidays.json`)\n            store.dispatch(actions.setHolidays(response.data['england-and-wales']['events']))\n            \n        }\n        getIsHoliday()\n    }, [])\n\n    const getTag = () => {\n        if (isToday === 0) return (<h3>ðŸ¤” Thinking ðŸ¤”</h3>);\n        if (isToday === 1) return (<h3>ðŸ˜¢ No ðŸ˜¢</h3>);\n        if (isToday === 2) return (<h3>ðŸŽ‰ Yes ðŸŽ‰</h3>);\n    }\n\n    return (\n        <div className=\"bg-primary w-100 p-4 text-light rounded\">\n            <h1>Is Today a Bank Holiday?</h1>\n            {getTag()}\n            <h4>Next holiday in {nextHoliday} days!</h4>\n        </div>\n    )\n}\n\nexport default TodayHoliday\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst UpcomingHolidays = () => {\n    const holidays = useSelector(state => state.holiday.holidayArray)\n    const ONE_DAY = 1000 * 60 * 60 * 24;\n    let now = new Date()\n    const list = holidays.map((holiday,index) =>\n        (<div key={index} className=\"col-12 col-sm-6 col-md-4 col-xl-3 mb-4 d-flex align-items-stretch\">\n            <div className=\"card w-100\">\n                <div className=\"card-body\">\n                    <h5 className=\"card-title mb-0\">{holiday.title}</h5>\n                    <p className=\"card-text m-0\"><small>{holiday.notes}</small></p>\n                    <p className=\"card-text\">{Math.round((new Date(holiday.date) - now) / ONE_DAY)} days away!</p>\n                </div>\n            </div>\n        </div>)\n    )\n\n    return (\n        <div className=\"row mt-4\">\n            {list}\n        </div>\n    )\n}\n\nexport default UpcomingHolidays\n","import React from 'react';\nimport TodayHoliday from './features/TodayHoliday/TodayHoliday';\nimport UpcomingHolidays from './features/UpcomingHolidays/UpcomingHolidays';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <div className=\"row\">\n        <div className=\"col-12 mt-4\">\n          <TodayHoliday />\n        </div>\n      </div>\n        <UpcomingHolidays />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}